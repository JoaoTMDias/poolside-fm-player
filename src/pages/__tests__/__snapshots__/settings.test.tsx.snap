// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Settings /> should render the settings page 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <header
        class="sc-AxiKw dqTRof row"
        id="top-bar"
      >
        <button
          class="top-bar__button button"
          data-testid="component-top-bar-button"
          type="button"
        >
          <span
            class="sr-only"
          >
            Close this window
          </span>
        </button>
        <div
          class="top-bar__handle"
          role="presentation"
        >
          <span
            class="top-bar__handle__item"
          />
          <span
            class="top-bar__handle__item"
          />
          <span
            class="top-bar__handle__item"
          />
          <span
            class="top-bar__handle__item"
          />
          <span
            class="top-bar__handle__item"
          />
          <span
            class="top-bar__handle__item"
          />
        </div>
        <h2
          class="top-bar__title"
        >
          Settings
        </h2>
      </header>
      <main
        class="window__main row"
        id="main-content"
      >
        <p>
          Settings Page here
        </p>
        <div
          class="sc-AxjAm goVOyD select-input "
          data-testid="component-select"
          id="theme"
        >
          <div
            class="select-input__container"
          >
            <button
              aria-expanded="false"
              aria-haspopup="listbox"
              aria-labelledby="theme-label theme-title"
              class="row select-input__button "
              data-testid="component-select-button"
              id="theme-button"
              type="button"
            >
              <div
                class="select-input__left"
              >
                <span
                  class="select-input__label"
                  id="theme-label"
                >
                  Theme:
                </span>
                <span
                  class="select-input__value as-paragraph"
                  id="theme-title"
                >
                  Poolside.Fm (Default)
                </span>
              </div>
              <svg
                class="select-input__arrow"
                fill="none"
                height="13"
                viewBox="0 0 12 13"
                width="12"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M6 10.35l-4.157-5.4h8.314L6 10.35z"
                  fill="var(--color-select-button-arrow)"
                />
              </svg>
            </button>
          </div>
        </div>
      </main>
    </div>
  </body>,
  "container": <div>
    <header
      class="sc-AxiKw dqTRof row"
      id="top-bar"
    >
      <button
        class="top-bar__button button"
        data-testid="component-top-bar-button"
        type="button"
      >
        <span
          class="sr-only"
        >
          Close this window
        </span>
      </button>
      <div
        class="top-bar__handle"
        role="presentation"
      >
        <span
          class="top-bar__handle__item"
        />
        <span
          class="top-bar__handle__item"
        />
        <span
          class="top-bar__handle__item"
        />
        <span
          class="top-bar__handle__item"
        />
        <span
          class="top-bar__handle__item"
        />
        <span
          class="top-bar__handle__item"
        />
      </div>
      <h2
        class="top-bar__title"
      >
        Settings
      </h2>
    </header>
    <main
      class="window__main row"
      id="main-content"
    >
      <p>
        Settings Page here
      </p>
      <div
        class="sc-AxjAm goVOyD select-input "
        data-testid="component-select"
        id="theme"
      >
        <div
          class="select-input__container"
        >
          <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="theme-label theme-title"
            class="row select-input__button "
            data-testid="component-select-button"
            id="theme-button"
            type="button"
          >
            <div
              class="select-input__left"
            >
              <span
                class="select-input__label"
                id="theme-label"
              >
                Theme:
              </span>
              <span
                class="select-input__value as-paragraph"
                id="theme-title"
              >
                Poolside.Fm (Default)
              </span>
            </div>
            <svg
              class="select-input__arrow"
              fill="none"
              height="13"
              viewBox="0 0 12 13"
              width="12"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M6 10.35l-4.157-5.4h8.314L6 10.35z"
                fill="var(--color-select-button-arrow)"
              />
            </svg>
          </button>
        </div>
      </div>
    </main>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
